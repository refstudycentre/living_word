<?php

module_load_include('inc','living_word_ui','living_word_ui.pages');

/**
 * Implements hook_block_info().
 */
function living_word_ui_block_info() {
  return array(
    'picker' => array(
      'info'       => 'Verse picker',
      //'cache'    => DRUPAL_CACHE_GLOBAL // same for every user on every page
      'cache'      => DRUPAL_NO_CACHE, // for development
      'properties' => array(),
    ),
    'scripture' => array(
      'info'       => 'Scripture view',
      //'cache'    => DRUPAL_CACHE_GLOBAL // same for every user on every page
      'cache'      => DRUPAL_NO_CACHE, // for development
      'properties' => array(),
    ),
    'detail' => array(
      'info'       => 'Level of detail',
      //'cache'    => DRUPAL_CACHE_GLOBAL // same for every user on every page
      'cache'      => DRUPAL_NO_CACHE, // for development
      'properties' => array(),
    ),
    'position' => array(   //structure:  background, exegesis, application, etc. 
      'info'       => 'Position',
      //'cache'    => DRUPAL_CACHE_GLOBAL // same for every user on every page
      'cache'      => DRUPAL_NO_CACHE, // for development
      'properties' => array(),
    ),
    'comments' => array(
      'info'       => 'Living Word Comments',
      //'cache'    => DRUPAL_CACHE_GLOBAL // same for every user on every page
      'cache'      => DRUPAL_NO_CACHE, // for development
      'properties' => array(),
    ),
    'integratedscripture' => array(
      'info'       => 'Integrated Scripture block (picker, parallel/alone, ajax reading)',
      //'cache'    => DRUPAL_CACHE_GLOBAL // same for every user on every page
      'cache'      => DRUPAL_NO_CACHE, // for development
      'properties' => array(),
    ),
  );
}


/**
 * Implements hook_block_view().
 */
function living_word_ui_block_view($delta = '') {

  switch ($delta) {
    case 'picker':
      return array(
        'subject' => t('Pick a verse:'),
        'content' => array(
          'verse' => drupal_get_form('living_word_ui_verse_picker_form'),
        ),
      );
    case 'integratedscripture':
      return array(
        'subject' => '',  //no block heading
        'content' => array(
          'livingword' => drupal_get_form('living_word_ui_integratedscriptureform'),
        ),
      );
	case 'scripture':
      return array(
        'subject' => t('Scripture:'),
        'content' => living_word_ui_block_scripture(),
      );
    case 'detail':
      return array(
        'subject' => t('Level of detail:'),
        'content' => living_word_ui_block_detail(),
      );
    case 'position':
      return array(
        'subject' => t('Position:'),
        'content' => living_word_ui_block_position(),
      );
    case 'comments':
      return array(
        'subject' => t('LWC nodes:'),
        'content' => living_word_ui_block_comments(),
      );
  }

  return NULL;

}


/**
 * Generate render array for scripture block
 */
function living_word_ui_block_scripture($values = array(), $translations = array()) {

  $content = array(
    'wrapper' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'living_word_ui_scripture'
      ),
    ),
  );

  $w = &$content['wrapper'];

  if (empty($values)) {

    $w['no_verses'] = array('#markup' => t("No verses selected."));

  } else {

    if (empty($translations)) {

      $t = array(variable_get('scripture_default_translation', NULL));
      if ($t) {
        $translations[] = $t;
      }
      else {
        drupal_set_message(t('Default translation has not been defined.'), 'error', false);
      }

    }

    $w['verses'] = array(
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#items' => array(),
    );

    foreach ($translations as $t) {
      $values['translation'] = $t;
      $w['verses']['#items'][] = render(scripture_preview($values));
    }

  }

  return $content;

}


/**
 * Generate render array for detail block
 */
function living_word_ui_block_detail($values = array()) {

  $content = array(
    'wrapper' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'living_word_ui_detail'
      ),
    ),
  );

  $w = &$content['wrapper'];

  if (empty($values)) {

    $w['no_verses'] = array('#markup' => t("No verses selected."));

  } else {



  }

  return $content;

}


/**
 * Generate render array for position block
 */
function living_word_ui_block_position($values = array()) {

  $content = array(
    'wrapper' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'living_word_ui_position'
      ),
    ),
  );

  $w = &$content['wrapper'];

  if (empty($values)) {

    $w['no_verses'] = array('#markup' => t("No verses selected."));

  } else {



  }

  return $content;

}


/**
 * Generate render array for comments block
 */
function living_word_ui_block_comments($picker_values = array(), $detail_values = array(), $position_values = array()) {

  $content = array(
    'wrapper' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'living_word_ui_comments'
      ),
    ),
  );

  $w = &$content['wrapper'];

  if (empty($values)) {

    $w['no_verses'] = array('#markup' => t("No verses selected."));

  } else {

    // Load nodes from the db based on the form values from the verse picker, level of detail and position forms.

    dpm(living_word_get_comments($picker_values, $detail_values, $position_values));

  }

  return $content;

}


/**
 * Form containing a verse picker.
 * Build the form.
 * Used as a navigational element in blocks.
 */
function living_word_ui_verse_picker_form($form, &$form_state) {

  $form['#tree'] = TRUE;

  $form['verse'] = array(
    '#type'     => 'scripture_verse_picker',
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'living_word_ui').'/living_word_ui.css',
      ),
    ),
    // TODO: ajax ... ?
  );

  if (empty($form_state['storage']['preview_wrapper_id'])) {
    $form_state['storage']['preview_wrapper_id'] = drupal_html_id('living_word_ui_verse_picker_preview');
  }

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Update'),
    '#ajax'  => array(
      'callback' => 'living_word_ui_verse_picker_ajax_submit',
      'effect'   => 'fade',
    ),
  );

  $ref = isset($form_state['values']['verse']) ? scripture_preview($form_state['values']['verse'], array(
    'show_ref'  => TRUE,
    'show_text' => SCRIPTURE_SHOW_TEXT_NO,
  )) : array(
    '#markup' => t("No verse selected."),
  );

  $form['preview'] = array(
    '#type' => 'container',
    '#id'   => $form_state['storage']['preview_wrapper_id'],
    'ref'   => $ref,
  );

  return $form;

}

function living_word_ui_integratedscriptureform($form, &$form_state) {

  $form['#tree'] = TRUE;

  $form['verse'] = array(
    '#type'     => 'scripture_verse_picker',
	'#settings' => array('style' => 2),  /* 1 = usual normal GUI;   2 = modern-ui - see scripture module for the details */
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'living_word_ui').'/living_word_ui.css',
      ),
    ),
    // TODO: ajax ... ?
  );

  if (empty($form_state['storage']['preview_wrapper_id'])) {
    $form_state['storage']['preview_wrapper_id'] = drupal_html_id('living_word_ui_verse_picker_preview');
  }

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Update'),
    '#ajax'  => array(
      'callback' => 'living_word_ui_verse_picker_ajax_submit',
      'effect'   => 'fade',
    ),
  );

  $ref = isset($form_state['values']['verse']) ? scripture_preview($form_state['values']['verse'], array(
    'show_ref'  => TRUE,
    'show_text' => SCRIPTURE_SHOW_TEXT_NO,
  )) : array(
    '#markup' => t("No verse selected."),
  );

  $form['preview'] = array(
    '#type' => 'container',
    '#id'   => $form_state['storage']['preview_wrapper_id'],
    'ref'   => $ref,
  );

  return $form;

}




/**
 * Form containing a verse picker.
 * Submit function.
 */
function living_word_ui_verse_picker_form_submit($form, &$form_state) {

  // Make sure that the form is rebuilt so that we get a new preview element
  $form_state['rebuild'] = TRUE;

}


/**
 * Form containing a verse picker.
 * AJAX submit function
 *
 * Update multiple elements on the page
 */
function living_word_ui_verse_picker_ajax_submit($form, $form_state) {

  $translations = array(1,2); // TODO: decide which translations to show

  return array(
    '#type'     => 'ajax',
    '#commands' => array(
      ajax_command_replace("#".$form_state['storage']['preview_wrapper_id'], render($form['preview'])),
      ajax_command_replace("#living_word_ui_scripture", render(living_word_ui_block_scripture($form_state['values']['verse'], $translations))),
      ajax_command_replace("#living_word_ui_detail", render(living_word_ui_block_detail($form_state['values']['verse']))),
      ajax_command_replace("#living_word_ui_position", render(living_word_ui_block_position($form_state['values']['verse']))),
      ajax_command_replace("#living_word_ui_comments", render(living_word_ui_block_comments($form_state['values']['verse']))),
    ),
  );

}

/* Permissions */
function living_word_ui_permission() {
  $permissions = array();
  
  $permissions['lwui_editbrowseranges'] = array(
    'title' => t('Living Word - Edit Browse ranges'),
    'description' => t('Maintain the lw browse ranges, used by the browse pages'),
    'restrict access' => TRUE,
  );

  $permissions['lwui_browse'] = array(
    'title' => t('Living Word - View browse pages'),
    'description' => t('Access pages like browse/* which lists the bible books with the number of lwcomments added to them.'),
  );
   
  return $permissions;
}



/* Pages  */

function living_word_ui_menu() {
	$items['browse'] = array(
		// living word browse pages (summary to get to the info)
		// without parameters :  only per bible-book;  
       'page callback' => 'living_word_ui_browsemain',
	   'access callback' => true,
       'access callback'  => 'user_access',
       'access arguments' => array('lwui_browse'),
	);
	$items['browse/%'] = array(
		// living word browse pages (summary to get to the info)
		// without parameters :  only per bible-book;  
		// with a bible-book:  per chapter as defined in the browse-range table.
       'page callback' => 'living_word_ui_browsepage',
	   'page arguments' => array(1),
       'access callback'  => 'user_access',
       'access arguments' => array('lwui_browse'),
	);
	$items['lwc'] = array(
		// living word pages - chunk together (via browse function)
       'page callback' => 'living_word_ui_chunkpage',
       'access callback'  => 'user_access',
       'access arguments' => array('lwui_browse'),
	);
	
	//TODO:  add the maintenance of the browse ranges in here too
    return $items;
}

