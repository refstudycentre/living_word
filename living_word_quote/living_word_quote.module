<?php


/*
 * FIELD TYPE
 * https://api.drupal.org/api/drupal/modules%21field%21field.api.php/group/field_types/7
 */


/**
 * Implements hook_field_info().
 * https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_info/7
 */
function living_word_quote_field_info() {
  $fields = array();

  $fields['living_word_quote'] = array(
    'label' => t('LW quote'),
    'description' => t('Quote a part of a given text and cache that quote in the field.'),
    'default_widget' => 'living_word_quote_widget_js',
    'default_formatter' => 'text_plain'
  );

  return $fields;
}


/**
 * Implements hook_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors).
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_validate/7
 * Validate this module's field data.
 * If there are validation problems, add to the $errors array (passed by reference). There is no return value.
 */
function living_word_quote_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  // FAPI already checks that required fields are filled in

}


/**
 * Implements hook_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items).
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_presave/7
 * Define custom presave behavior for this module's field types.
 * Make changes or additions to field values by altering the $items parameter by reference. There is no return value.
 */
function living_word_quote_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  foreach($items as &$item) {
    if (empty($item['start'])) {
      $item['start'] = 0;
    }
  }

}


/*
 * FIELD WIDGETS
 * https://api.drupal.org/api/drupal/modules%21field%21field.api.php/group/field_widget/7
 */


/**
 * Implements hook_field_widget_info().
 * https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_widget_info/7
 */
function living_word_quote_field_widget_info() {
  $widgets = array();

  $widgets['living_word_quote_widget_simple'] = array(
    'label' => t('LW quote form'),
    'description' => t('A compound form element using two plain text fields.'),
    'field types' => array(
      'living_word_quote'
    ),
    'behaviours' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,  // the entire widget accepts one entry
      'default_value'   => FIELD_BEHAVIOR_NONE      // the widget can have no default value
    ),
    'weight' => 10,
  );

  $widgets['living_word_quote_widget_js'] = array(
    'label' => t('LW quote selector'),
    'description' => t('A JS widget that allows the user to select a portion of the given text.'),
    'field types' => array(
      'living_word_quote'
    ),
    'behaviours' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,  // the entire widget accepts one entry
      'default_value'   => FIELD_BEHAVIOR_NONE      // the widget can have no default value
    ),
    'weight' => 20,
  );

  return $widgets;
}


/**
 * Implements hook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element).
 * https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_widget_form/7
 * Create the complex form element that constitutes the widget, using basic form elements.
 */
function living_word_quote_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

//  dpm($form, "form");
//  dpm($form_state, "form_state");
//  dpm($field, "field");
//  dpm($instance, "instance");
//  dpm($langcode, "langcode");
//  dpm($items, "items");
//  dpm($delta, "delta");
//  dpm($element, "element");

  switch($instance['widget']['type']) {
    case 'living_word_quote_widget_simple':
      living_word_quote_field_widget_form_simple($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'living_word_quote_widget_js':
      living_word_quote_field_widget_form_js($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
  }

  return $element;

}


/**
 * Build the simple widget form. Called from living_word_quote_field_widget_form().
 */
function living_word_quote_field_widget_form_simple(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, &$element) {

  $element['#type'] = 'fieldset'; // put a nice border with title around the elements belonging to this field

  $element['#id'] = drupal_html_id("living-word-quote-form");

  $element['start'] = array(
    '#type'             => 'textfield',
    '#title'            => t('Starting character position'),
    '#size'             => 3,
    '#description'      => t('This would be zero if the quote starts on the first character of the source text.'),
    '#default_value'    => empty($items[$delta]['start']) ? 0 : $items[$delta]['start'],
    '#element_validate' => array('living_word_quote_element_validate_integer_positive_or_zero'),
    '#attributes'       => array(
      'class' => array('living-word-quote-start'),
    ),
  );

  $element['text'] = array(
    '#type'     => 'textfield',
    '#title'    => t('Quoted text'),
    '#default_value'    => empty($items[$delta]['text']) ? '' : $items[$delta]['text'],
    '#attributes'       => array(
      'class' => array('living-word-quote-text'),
    ),
  );

}


/**
 * Build the fancy JS widget form. Called from living_word_quote_field_widget_form().
 */
function living_word_quote_field_widget_form_js(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, &$element) {

  // Base this form on the simple form
  living_word_quote_field_widget_form_simple($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  /*
   * Add default source text. This should be changed by implementing
   * hook_field_widget_living_word_quote_widget_js_form_alter
   */
  $element['#source_text'] = t("The quick brown fox jumps over the lazy dog.");

  // Attach the javascript magic
  $element['#attached']['js'] = array(
    drupal_get_path('module', 'living_word_quote') . '/living_word_quote.js',
    drupal_get_path('module', 'living_word_quote') . '/jquery.selection.js',
    array(
      'data' => array(
        'living_word_quote' => array(
          'form_id'     => &$element['#id'],
          'source_text' => &$element['#source_text']
        ),
      ),
      'type' => 'setting',
    ),
  );

}


/**
 * Implements hook_field_is_empty($item, $field).
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_is_empty/7
 * Define what constitutes an empty item for a field type by returning TRUE or FALSE
 */
function living_word_quote_field_is_empty($item, $field) {

  return empty($item['text']);

}


/**
 * Just like the built in element_validate_integer_positive, but it allows zero
 * https://api.drupal.org/api/drupal/includes!form.inc/function/element_validate_integer_positive/7
 */
function living_word_quote_element_validate_integer_positive_or_zero($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be a positive integer or zero.', array('%name' => $element['#title'])));
  }
}


/**
 * Implements hook_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items).
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_prepare_view/7
 */
function living_word_quote_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach (array_keys($entities) as $eid) {
    foreach ($items[$eid] as &$item) {

      // we use text_plain as the field formatter, which expects the text at the 'value' key
      $item['value'] = &$item['text'];

    }
  }
}


/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter(&$element, &$form_state, $context).
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_WIDGET_TYPE_form_alter/7
 * This is an example of how other modules, such as living_word_admin, can
 * influence the JS field widget to specify the source text from which the
 * quoted text must be selected.
 */
function living_word_quote_field_widget_living_word_quote_widget_js_form_alter(&$element, &$form_state, $context) {
//  $element['#source_text'] = t("Why is the brown fox quick, but the dog lazy?");
}

